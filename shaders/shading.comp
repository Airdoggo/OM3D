#version 450

#include "utils.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D in_albedo;
layout(binding = 1) uniform sampler2D in_normal;
layout(binding = 2) uniform sampler2D in_depth;
layout(rgba8, binding = 3) uniform writeonly image2D out_color;

layout(binding = 0) uniform Data {
    FrameData frame;
};

layout(binding = 1) buffer PointLights {
    PointLight point_lights[];
};

uniform mat4 inv_viewproj;
uniform vec2 screen_size;

const vec3 ambient = vec3(0.0);

vec3 unproject(vec2 uv, float depth) {
    const vec3 ndc = vec3(uv * 2.0 - vec2(1.0), depth);
    const vec4 p = inv_viewproj * vec4(ndc, 1.0);
    return p.xyz / p.w;
}

void main() {

    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    const vec3 albedo = texelFetch(in_albedo, coord, 0).rgb;
    const float depth = texelFetch(in_depth, coord, 0).x;
    // Convert normals back to world-space
    const vec3 normal = (texelFetch(in_normal, coord, 0).xyz - 0.5) * 2.;

    vec3 position = unproject(coord / screen_size, depth);

    // Light Calculation
    if (depth == 0.0) {
        return;
    }
    
    vec3 acc = frame.sun_color * max(0.0, dot(frame.sun_dir, normal)) + ambient;

    for(uint i = 0; i != frame.point_light_count; ++i) {
        PointLight light = point_lights[i];
        const vec3 to_light = (light.position - position);
        const float dist = length(to_light);
        const vec3 light_vec = to_light / dist;

        const float NoL = dot(light_vec, normal);
        const float att = attenuation(dist, light.radius);
        if(NoL <= 0.0 || att <= 0.0f) {
            continue;
        }

        acc += light.color * (NoL * att);
    }

    vec3 color = albedo * acc;

    imageStore(out_color, coord, vec4(color, 1.0));
}

